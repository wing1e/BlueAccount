{"version":3,"names":["timeChain","targetDate","dateType","chainType","date","_typeof2","start","end","Date","includes","split","length","_targetDate$split","_targetDate$split2","_slicedToArray2","year","month","offset","setDate","getDate","utils_getDate","getWeek","setMonth","getMonth","setFullYear","getFullYear","String","padStart","day","concat","_utils_getDate$getWee"],"sources":["time-chain.js"],"sourcesContent":["import { getWeek } from \"./get-date\";\r\n\r\nexport const timeChain = (targetDate, dateType, chainType) => {\r\n    let date;\r\n    // 根据不同格式的 targetDate 创建 Date 对象\r\n    if(typeof targetDate === 'object' && targetDate.start && targetDate.end) {\r\n        date = new Date(targetDate.start);\r\n    }else if (targetDate.includes('-')) {\r\n        if (targetDate.split('-').length === 2) {\r\n            // 处理 'YYYY-MM' 格式\r\n            const [year, month] = targetDate.split('-');\r\n            date = new Date(year, month - 1);\r\n        } else {\r\n            // 处理 'YYYY-MM-DD' 格式\r\n            date = new Date(targetDate);\r\n        }\r\n    } else {\r\n        // 处理 'YYYY' 格式\r\n        date = new Date(targetDate, 0);\r\n    }\r\n\r\n    // 根据日期类型和链类型计算新日期\r\n    if (dateType === 3) { // 日\r\n        const offset = chainType === 'last' ? -1 : 1;\r\n        date.setDate(date.getDate() + offset);\r\n    }else if (dateType === 2) { // 周\r\n        date.setDate(getWeek(date).start); // 设置日期为当前周的第一天\r\n        const offset = chainType === 'last'? -1 : 1;\r\n        date.setDate(date.getDate() + offset * 7); // 调整日期到上一周或下一周\r\n    } else if (dateType === 1) { // 月\r\n        const offset = chainType === 'last' ? -1 : 1;\r\n        date.setMonth(date.getMonth() + offset);\r\n    } else if (dateType === 0) { // 年\r\n        const offset = chainType === 'last' ? -1 : 1;\r\n        date.setFullYear(date.getFullYear() + offset);\r\n    }\r\n\r\n    // 根据日期类型格式化返回结果\r\n    if (dateType === 3) {\r\n        const year = date.getFullYear();\r\n        const month = String(date.getMonth() + 1).padStart(2, '0');\r\n        const day = String(date.getDate()).padStart(2, '0');\r\n        return `${year}-${month}-${day}`;\r\n    }else if (dateType === 2) {\r\n        const {start,end} = getWeek(date);\r\n        return {start:start,end:end};\r\n\r\n    }else if (dateType === 1) {\r\n        const year = date.getFullYear();\r\n        const month = String(date.getMonth() + 1).padStart(2, '0');\r\n        return `${year}-${month}`;\r\n    } else if (dateType === 0) {\r\n        return String(date.getFullYear());\r\n    }\r\n\r\n\treturn targetDate;\r\n};"],"mappings":"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","ignoreList":[]}