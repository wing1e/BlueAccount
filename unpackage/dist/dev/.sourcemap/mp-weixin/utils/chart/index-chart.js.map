{"version":3,"file":"index-chart.js","sources":["utils/chart/index-chart.js"],"sourcesContent":["import { examiner } from \"../examiner.js\"\r\nimport {\r\n\tgetNodeInfo\r\n} from \"../node-info.js\"\r\n\r\n// 样式常量配置\r\nconst CHART_STYLES = {\r\n\tgrid: {\r\n\t\tcolor: '#E3E3E5',\r\n\t\tlineWidth: 1,\r\n\t\tdash: [2, 4]\r\n\t},\r\n\tline: {\r\n\t\tcolor: '#de6ea6',\r\n\t\tlineWidth: 0.5\r\n\t},\r\n\tpoint: {\r\n\t\tradius: 3,\r\n\t\tfill: '#00B6E6',\r\n\t\tstroke: true\r\n\t},\r\n\tlabel: {\r\n\t\tfontSize: 10,\r\n\t\tcolor: '#000'\r\n\t}\r\n}\r\n\r\n// 坐标轴边距配置\r\nconst AXIS_MARGIN = {\r\n\ttop: 10,\r\n\tbottom: 20\r\n}\r\n\r\nexport const indexChartInit = async (instance, chartData, className, canvasId) => {\r\n\ttry {\r\n\t\t// 获取画布尺寸\r\n\t\tconst canvasNode = await getNodeInfo(instance, className)\r\n\t\tconst {\r\n\t\t\twidth: ctxW,\r\n\t\t\theight: ctxH\r\n\t\t} = canvasNode[0]\r\n\t\t// 创建绘图上下文\r\n\t\tconst ctx = uni.createCanvasContext(canvasId, instance)\r\n\t\t\r\n\t\t\r\n\t\t// 计算绘图区域\r\n\t\tconst drawingArea = {\r\n\t\t\ttop: AXIS_MARGIN.top,\r\n\t\t\tbottom: ctxH - AXIS_MARGIN.bottom,\r\n\t\t\tget center() {\r\n\t\t\t\treturn (this.top + this.bottom) / 2\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t// 绘制网格系统\r\n\t\tdrawGridLines(ctx, ctxW, drawingArea)\r\n\r\n\t\t// 绘制底部标签\r\n\t\tdrawBottomLabels(ctx, ctxW, drawingArea.bottom, chartData)\r\n\r\n\t\t// 绘制数据折线\r\n\t\tif(examiner(chartData)){\r\n\t\t\tdrawChartLine(ctx, chartData, ctxW, drawingArea)\r\n\t\t}\r\n\t\t\r\n\r\n\t\t// 提交绘制\r\n\t\tctx.draw()\r\n\t} catch (error) {\r\n\t\tconsole.error('图表初始化失败:', error)\r\n\t\t// 可在这里添加错误处理逻辑\r\n\t}\r\n}\r\n\r\n/* 绘制网格线 */\r\nfunction drawGridLines(ctx, canvasWidth, area) {\r\n\tctx.save() // 保存当前上下文状态\r\n\r\n\t// 绘制底部实线\r\n\tctx.beginPath()\r\n\tctx.strokeStyle = CHART_STYLES.grid.color\r\n\tctx.lineWidth = CHART_STYLES.grid.lineWidth\r\n\r\n\tctx.moveTo(0, area.bottom)\r\n\tctx.lineTo(canvasWidth, area.bottom)\r\n\tctx.stroke()\r\n\r\n\t// 绘制中间虚线\r\n\tctx.beginPath()\r\n\tctx.setLineDash(CHART_STYLES.grid.dash)\r\n\tctx.moveTo(0, area.center)\r\n\tctx.lineTo(canvasWidth, area.center)\r\n\tctx.stroke()\r\n\r\n\tctx.restore() // 恢复原始上下文状态\r\n}\r\n\r\n/* 绘制底部日期标签 */\r\nfunction drawBottomLabels(ctx, canvasWidth, bottomY, data) {\r\n\tconst labelSpace = canvasWidth / (data.length + 1) // 动态计算间距\r\n\t\r\n\tctx.save()\r\n\tctx.setFontSize(CHART_STYLES.label.fontSize)\r\n\tctx.fillStyle = CHART_STYLES.label.color\r\n\tif(data.length===7||data.length===12){\r\n\t\tdata.forEach((item, index) => {\r\n\t\t\tconst dateStr = item.date.split('-').slice(-1) // 提取DD\r\n\t\t\tconst xPos = (index + 1) * labelSpace\r\n\t\t\tctx.setTextAlign('center')\r\n\t\t\tctx.fillText(dateStr, xPos, bottomY + 15) // 下移15px避免重叠\r\n\t\t})\r\n\t}else{\r\n\t\tdata.forEach((item, index) => {\r\n\t\t\tif(index%6===0){\r\n\t\t\t\tconst dateStr = item.date.split('-').slice(-1)  // 提取DD\r\n\t\t\t\tconst xPos = (index + 1) * labelSpace\r\n\t\t\t\tctx.setTextAlign('center')\r\n\t\t\t\tctx.fillText(dateStr, xPos, bottomY + 15) // 下移15px避免重叠\r\n\t\t\t}\r\n\t\t\t\r\n\t\t})\r\n\t}\r\n\t\r\n\r\n\tctx.restore()\r\n}\r\n\r\n/* 绘制折线图主体 */\r\nfunction drawChartLine(ctx, data, canvasWidth, area) {\r\n\tconst maxValue = Math.max(...data.map(item => item.expense))\r\n\tconst pointSpace = canvasWidth / (data.length + 1)\r\n\r\n\t// 生成坐标点\r\n\tconst points = data.map((item, index) => ({\r\n\t\tx: (index + 1) * pointSpace,\r\n\t\ty: calculateYPosition(item.expense, maxValue, area),\r\n\t\tvalue: item.expense\r\n\t}))\r\n\r\n\t// 绘制连接线\r\n\tctx.save()\r\n\tctx.beginPath()\r\n\tctx.strokeStyle = CHART_STYLES.line.color\r\n\tctx.lineWidth = CHART_STYLES.line.lineWidth\r\n\tctx.setLineDash([]) // 确保使用实线\r\n\r\n\tpoints.forEach((point, index) => {\r\n\t\tindex === 0 ? ctx.moveTo(point.x, point.y) : ctx.lineTo(point.x, point.y)\r\n\t})\r\n\tctx.stroke()\r\n\r\n\t// 绘制数据点\r\n\tpoints.forEach(point => {\r\n\t\tctx.beginPath()\r\n\t\tctx.arc(point.x, point.y, CHART_STYLES.point.radius, 0, Math.PI * 2)\r\n\t\tctx.fillStyle = CHART_STYLES.point.fill\r\n\t\tctx.fill()\r\n\t\tif (CHART_STYLES.point.stroke) {\r\n\t\t\tctx.stroke()\r\n\t\t}\r\n\t})\r\n\r\n\tctx.restore()\r\n}\r\n\r\n/* 计算Y轴坐标 */\r\nfunction calculateYPosition(value, maxValue, area) {\r\n\tconst verticalRange = area.bottom - area.top\r\n\treturn area.top + verticalRange * (1 - value / maxValue)\r\n}"],"names":["getNodeInfo","uni","examiner"],"mappings":"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"}